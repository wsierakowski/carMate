extends layout

block content
  include navbar
  .row

    //-----------------------------------
    //- Car Menu
    //-----------------------------------

    .col-sm-2
      - var curCar = cars.data[cars.currentCar.id]
      h4 Select your car:
      .list-group
        each car, i in cars.data
          a.list-group-item(
            href="/consumptionnew/" + car.id,
            class={active: car.active}
          )=car.reg
    .col-sm-10
      form#consumptionForm(method="POST", action="/consumptionnew/")
        input(type="hidden", name="carid", value=curCar.id)
        .panel.panel-default
          .panel-heading
            .panel-title Calculate Fuel Consumption
          .panel-body
            .row
              .col-sm-6
                .form-group
                  label(for="kilometers") Kilometers
                  input.form-control(type="number", id="kms", name="kms", placeholder="", min="0",
                    onkeypress="return formUtils.isNumberKey(event)")
                .form-group
                  label(for="liters") Liters
                  input.form-control(type="number", id="liters", name="liters", placeholder="", min="0",
                    onkeypress="return formUtils.isNumberKey(event)")
                .form-group
                  label(for="lpkm") Liters Per 100 kms
                  input.form-control(type="number", id="lpkm", name="lpkm", placeholder="0", disabled)
              .col-sm-6
                .form-group
                  label(for="miles") Miles
                  input.form-control(type="number", id="miles", name="miles", placeholder="", min="0",
                    onkeypress="return formUtils.isNumberKey(event)")
                .form-group
                  label(for="gallons") Gallons
                  input.form-control(type="number", id="gallons", name="gallons", placeholder="", min="0",
                    onkeypress="return formUtils.isNumberKey(event)")
                .form-group
                  label(for="mpg") Miles Per Gallon
                  input.form-control(type="number", id="mpg", name="mpg", placeholder="0", disabled)
            button.btn.btn-default(type="reset") Clear Form
        button.btn.btn-primary.pull-right#submitBtn(type="submit", disabled) Submit

  //- TODO: it would be better to merge these different js files
  script(src="/public/conversions.js")
  script(src="/public/formutils.js")
  script.
    var kms = document.getElementById('kms'),
        miles = document.getElementById('miles'),
        liters = document.getElementById('liters'),
        gallons = document.getElementById('gallons'),
        lpkm = document.getElementById('lpkm'),
        mpg = document.getElementById('mpg'),
        form = document.getElementById('consumptionForm'),
        submitBtn = document.getElementById('submitBtn');

    var calculateMileage = function() {
      //console.log('liters.value:', liters.value, 'kms.value:', kms.value);
      if (liters.value !== "" && kms.value !== "") {
        lpkm.value = converter.getConsumption(parseFloat(liters.value), parseFloat(kms.value));
        mpg.value = converter.getConsumptionMpg(parseFloat(liters.value), parseFloat(kms.value));
        submitBtn.removeAttribute('disabled');
      } else {
        lpkm.value = mpg.value = "";
        submitBtn.setAttribute('disabled', true);
      }
    }

    // Resetting form doesn't automatically make disabled inputs enabled
    form.addEventListener('reset', function() {
      kms.removeAttribute('disabled');
      miles.removeAttribute('disabled');
      liters.removeAttribute('disabled');
      gallons.removeAttribute('disabled');
      submitBtn.setAttribute('disabled', true);
    });

    kms.addEventListener('input', function() {
      //console.log('kms:['+ kms.value + ']');
      calculateMileage();
      if (kms.value === "") {
        miles.removeAttribute('disabled');
        miles.value = "";
      }
      else {
        miles.setAttribute('disabled', false);
        miles.value = converter.kmsToMiles(parseFloat(kms.value));
      }
    });

    miles.addEventListener('input', function() {
      //console.log('miles:['+ miles.value + ']');
      calculateMileage();
      if (miles.value === "") {
        kms.removeAttribute('disabled');
        kms.value = "";
      }
      else {
        kms.setAttribute('disabled', false);
        kms.value = converter.milesToKms(parseFloat(miles.value));
      }
    });

    liters.addEventListener('input', function() {
      //console.log('liters:['+ liters.value + ']');
      calculateMileage();
      if (liters.value === "") {
        gallons.removeAttribute('disabled');
        gallons.value = "";
      }
      else {
        gallons.setAttribute('disabled', false);
        gallons.value = converter.litersToGallons(parseFloat(liters.value));
      }
    });

    gallons.addEventListener('input', function() {
      //console.log('gallons:['+ gallons.value + ']');
      calculateMileage();
      if (gallons.value === "") {
        liters.removeAttribute('disabled');
        liters.value = "";
      }
      else {
        liters.setAttribute('disabled', false);
        liters.value = converter.gallonsToLiters(parseFloat(gallons.value));
      }
    });